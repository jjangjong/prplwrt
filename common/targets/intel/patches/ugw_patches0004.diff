From 55904488ed2a87dd19e94d72ea5cf413f08e761a Mon Sep 17 00:00:00 2001
From: Hauke Mehrtens <hauke.mehrtens@intel.com>
Date: Mon, 15 Oct 2018 12:21:40 +0200
Subject: [PATCH] restore package-version-override (and custom source dir)
 feature

This is needed by some intel packages.

This was removed in this commit: c82183639512 ("lantiq: remove unmaintained code")
---
 include/package-version-override.mk | 79 +++++++++++++++++++++++++++++
 include/package.mk                  | 18 +++++++
 2 files changed, 97 insertions(+)
 create mode 100644 include/package-version-override.mk

diff --git a/include/package-version-override.mk b/include/package-version-override.mk
new file mode 100644
index 0000000000..d33eff5038
--- /dev/null
+++ b/include/package-version-override.mk
@@ -0,0 +1,79 @@
+# remember the provided package version
+PKG_VERSION_ORGINAL:=$(PKG_VERSION)
+
+ifeq ($(PKG_IS_KERNEL_MODULE),y)
+PKG_NAME_PREF:=kmod-
+endif
+
+# in case that another version is provided, overwrite the original
+ifeq ($(CONFIG_$(PKG_NAME_PREF)$(PKG_NAME)_USE_CUSTOM_VERSION),y)
+PKG_VERSION:= $(strip $(subst ",, $(CONFIG_$(PKG_NAME_PREF)$(PKG_NAME)_CUSTOM_VERSION)))
+PKG_SOURCE:=$(subst $(PKG_VERSION_ORGINAL),$(PKG_VERSION),$(PKG_SOURCE))
+PKG_BUILD_DIR:=$(subst $(PKG_VERSION_ORGINAL),$(PKG_VERSION),$(PKG_BUILD_DIR))
+PKG_MD5SUM:=
+endif
+
+ifeq ($(PKG_BASE_NAME),)
+PKG_BASE_NAME:=$(PKG_NAME_PREF)$(PKG_NAME)
+endif
+
+# package specific configuration
+# if included the package version can be overwritten within the .config file (instead of changing the package specific Makefile)
+define Package/$(PKG_NAME_PREF)$(PKG_NAME)/override_version
+	menu "overwrite package version"
+		depends on PACKAGE_$(PKG_NAME_PREF)$(PKG_NAME)
+	config $(PKG_NAME_PREF)$(PKG_NAME)_USE_CUSTOM_VERSION
+		depends on PACKAGE_$(PKG_NAME_PREF)$(PKG_NAME)
+		bool "Use custom package version"
+		default n
+	config $(PKG_NAME_PREF)$(PKG_NAME)_CUSTOM_VERSION
+		depends on $(PKG_NAME_PREF)$(PKG_NAME)_USE_CUSTOM_VERSION
+		string "$(PKG_BASE_NAME) version as string (default version: $(PKG_VERSION_ORGINAL))"
+		default "$(PKG_VERSION_ORGINAL)"
+	endmenu
+endef
+
+# in case that an customer source path is provided, set the acc. default variable
+ifeq ($(CONFIG_$(PKG_NAME_PREF)$(PKG_NAME)_USE_CUSTOM_SOURCE_DIR),y)
+PKG_DEFAULT_CUSTOM_SOURCE_DIR:= $(strip $(subst ",, $(CONFIG_$(PKG_NAME_PREF)$(PKG_NAME)_CUSTOM_SOURCE_DIR)))
+endif
+
+# package specific configuration
+# if includeded the package source path can be overwritten within the .config file (instead of changing the package specific Makefile)
+# instead of using a source ball (eg tar.gz) the specified path will point to the location of the sources
+define Package/$(PKG_NAME_PREF)$(PKG_NAME)/override_source_path
+	menu "custom source directory"
+		depends on PACKAGE_$(PKG_NAME_PREF)$(PKG_NAME)
+	config $(PKG_NAME_PREF)$(PKG_NAME)_USE_CUSTOM_SOURCE_DIR
+		depends on PACKAGE_$(PKG_NAME_PREF)$(PKG_NAME)
+		bool "Use custom source directory"
+		default n
+	config $(PKG_NAME_PREF)$(PKG_NAME)_CUSTOM_SOURCE_DIR
+		depends on $(PKG_NAME_PREF)$(PKG_NAME)_USE_CUSTOM_SOURCE_DIR
+		string "Custom source directory"
+		default "$(PKG_DEFAULT_CUSTOM_SOURCE_DIR)"
+	endmenu
+endef
+
+# default:
+# include both configurations as long this file is included before package.mk
+# in case that you're defining your own onfiguration within the package Makefile just include the stuff by yourself
+define Package/$(PKG_NAME_PREF)$(PKG_NAME)/config
+   $(call Package/$(PKG_NAME_PREF)$(PKG_NAME)/override_version)
+   $(call Package/$(PKG_NAME_PREF)$(PKG_NAME)/override_source_path)
+endef
+
+# hook for custom source path
+# in case that the specified path is valid a link to the PKG_SOURCE_DIR is created
+# otherwise the make is stopped
+define prepare_custom_source_directory
+	if [ -d $(CONFIG_$(PKG_NAME_PREF)$(PKG_NAME)_CUSTOM_SOURCE_DIR) ]; then \
+		rm -Rf $(PKG_BUILD_DIR); \
+		echo "Preparing Custom Source Directory link: $(CONFIG_$(PKG_NAME_PREF)$(PKG_NAME)_CUSTOM_SOURCE_DIR)"; \
+		ln -snf $(CONFIG_$(PKG_NAME_PREF)$(PKG_NAME)_CUSTOM_SOURCE_DIR) $(PKG_BUILD_DIR); \
+	else \
+		echo "Custom Source Directory $(CONFIG_$(PKG_NAME_PREF)$(PKG_NAME)_CUSTOM_SOURCE_DIR) is invalid"; \
+		false; \
+	fi
+endef
+
diff --git a/include/package.mk b/include/package.mk
index 2473eecb92..9748c680b9 100644
--- a/include/package.mk
+++ b/include/package.mk
@@ -35,6 +35,10 @@ ifeq ($(strip $(PKG_IREMAP)),1)
   TARGET_CFLAGS += $(IREMAP_CFLAGS)
 endif
 
+ifeq ($(PKG_IS_KERNEL_MODULE),y)
+PKG_NAME_PREF:=kmod-
+endif
+
 include $(INCLUDE_DIR)/hardening.mk
 include $(INCLUDE_DIR)/prereq.mk
 include $(INCLUDE_DIR)/unpack.mk
@@ -116,6 +120,20 @@ ifeq ($(DUMP)$(filter prereq clean refresh update,$(MAKECMDGOALS)),)
   endif
 endif
 
+ifeq ($(CONFIG_$(PKG_NAME_PREF)$(PKG_NAME)_USE_CUSTOM_SOURCE_DIR),y)
+# disable load stage
+PKG_SOURCE_URL:=
+# add hook to install a link to customer source path of dedicated package
+Hooks/Prepare/Pre += prepare_custom_source_directory
+ifeq ($(filter autoreconf,$(Hooks/Configure/Pre)),)
+  Hooks/Configure/Pre += autoreconf_target
+endif
+# define empty default action
+define Build/Prepare/Default
+	@: 
+endef
+endif
+
 ifdef USE_GIT_TREE
   define Build/Prepare/Default
 	mkdir -p $(PKG_BUILD_DIR)
-- 
2.17.1

