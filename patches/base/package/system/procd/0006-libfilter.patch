diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4b3eebd..e756bda 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -20,7 +20,7 @@ INSTALL(TARGETS setlbf
 
 SET(SOURCES procd.c signal.c state.c inittab.c rcS.c ubus.c system.c sysupgrade.c
 	service/service.c service/instance.c service/validate.c service/trigger.c service/watch.c
-	utils/utils.c)
+	utils/utils.c service/libfilter.c)
 IF(NOT DISABLE_INIT)
   SET(SOURCES ${SOURCES} watchdog.c plug/coldplug.c plug/hotplug.c)
 ENDIF()
diff --git a/service/instance.c b/service/instance.c
index 35804de..4e2dabb 100644
--- a/service/instance.c
+++ b/service/instance.c
@@ -32,6 +32,7 @@
 
 #include "service.h"
 #include "instance.h"
+#include "libfilter.h"
 
 
 enum {
@@ -56,6 +57,7 @@ enum {
 	INSTANCE_ATTR_PIDFILE,
 	INSTANCE_ATTR_RELOADSIG,
 	INSTANCE_ATTR_TERMTIMEOUT,
+	INSTANCE_ATTR_LIBFILTER,
 	__INSTANCE_ATTR_MAX
 };
 
@@ -81,6 +83,7 @@ static const struct blobmsg_policy instance_attr[__INSTANCE_ATTR_MAX] = {
 	[INSTANCE_ATTR_PIDFILE] = { "pidfile", BLOBMSG_TYPE_STRING },
 	[INSTANCE_ATTR_RELOADSIG] = { "reload_signal", BLOBMSG_TYPE_INT32 },
 	[INSTANCE_ATTR_TERMTIMEOUT] = { "term_timeout", BLOBMSG_TYPE_INT32 },
+	[INSTANCE_ATTR_LIBFILTER] = { "libfilter", BLOBMSG_TYPE_STRING },
 };
 
 enum {
@@ -404,6 +407,22 @@ instance_start(struct service_instance *in)
 		return;
 	}
 
+	// inteno libfilter
+	if (in->libfilter) {
+		struct blob_attr *cur;
+		int rem;
+		char *prog_path = NULL;
+		blobmsg_for_each_attr(cur, in->command, rem) {
+			prog_path = blobmsg_get_string(cur);
+			// we need only the first command string
+			break;
+		}
+		if (!libfilter_check_is_allowed(prog_path, in->libfilter, in->srv->name, in->name)) {
+			LOG("Not starting instance %s::%s, service is using forbidden libraries", in->srv->name, in->name);
+			return;
+		}
+	}
+
 	instance_free_stdio(in);
 	if (in->_stdout.fd.fd > -2) {
 		if (pipe(opipe)) {
@@ -645,6 +664,17 @@ instance_config_changed(struct service_instance *in, struct service_instance *in
 	if (!blobmsg_list_equal(&in->errors, &in_new->errors))
 		return true;
 
+	// inteno libfilter
+	if (in->libfilter && in_new->libfilter)
+		if (strcmp(in->libfilter, in_new->libfilter))
+			return true;
+
+	if (in->libfilter && !in_new->libfilter)
+		return true;
+
+	if (!in->libfilter && in_new->libfilter)
+		return true;
+
 	return false;
 }
 
@@ -920,6 +950,14 @@ instance_config_parse(struct service_instance *in)
 	if (!instance_fill_array(&in->errors, tb[INSTANCE_ATTR_ERROR], NULL, true))
 		return false;
 
+	// inteno libfilter
+	if (tb[INSTANCE_ATTR_LIBFILTER]) {
+		char *libfilter = blobmsg_get_string(tb[INSTANCE_ATTR_LIBFILTER]);
+		if (libfilter) {
+			in->libfilter = libfilter;
+			LOG("%s::%s: found libfilter: %s\n", in->srv->name, in->name, libfilter);
+		}
+	}
 	return true;
 }
 
@@ -956,6 +994,9 @@ instance_config_move(struct service_instance *in, struct service_instance *in_sr
 	in->trace = in_src->trace;
 	in->node.avl.key = in_src->node.avl.key;
 
+	// inteno libfilter
+	in->libfilter = in_src->libfilter;
+
 	free(in->config);
 	in->config = in_src->config;
 	in_src->config = NULL;
@@ -1115,5 +1156,9 @@ void instance_dump(struct blob_buf *b, struct service_instance *in, int verbose)
 	if (verbose && in->trigger)
 		blobmsg_add_blob(b, in->trigger);
 
+	// inteno libfilter
+	if (in->libfilter)
+		blobmsg_add_string(b, "libfilter", in->libfilter);
+
 	blobmsg_close_table(b, i);
 }
diff --git a/service/instance.h b/service/instance.h
index bdd14de..15fab74 100644
--- a/service/instance.h
+++ b/service/instance.h
@@ -58,6 +58,8 @@ struct service_instance {
 	struct jail jail;
 	char *seccomp;
 	char *pidfile;
+	// inteno libfilter
+	char *libfilter;
 
 	uint32_t term_timeout;
 	uint32_t respawn_timeout;
diff --git a/service/libfilter.c b/service/libfilter.c
new file mode 100644
index 0000000..17d72ff
--- /dev/null
+++ b/service/libfilter.c
@@ -0,0 +1,219 @@
+#include <libubox/avl.h>
+#include <libubox/blob.h>
+#include <libubox/blobmsg.h>
+#include <libubox/blobmsg_json.h>
+
+#include "../log.h"
+#include "libfilter.h"
+
+#define PIPE_READ 0
+#define PIPE_WRITE 1
+
+#define MAX_LINE_SIZE 512
+#define MAX_LINES 512
+
+struct liblist_array {
+    char **string_array;
+    size_t count;
+};
+
+static int libfilter_get_whitelist(struct liblist_array *result, const char *libfilter_json, const char *service_name, const char *instance_name);
+static int libfilter_get_libs(struct liblist_array *result, const char *bin_path, const char *service_name, const char *instance_name);
+static bool libfilter_whitelist_check_allowed(struct liblist_array *whitelist,
+                                              struct liblist_array *liblist,
+                                              const char *service_name,
+                                              const char *instance_name);
+static void libfilter_free_list_data(struct liblist_array *liblist);
+
+bool libfilter_check_is_allowed(const char *bin_path, const char *libfilter_json, const char *service_name, const char *instance_name)
+{
+    LOG("libfilter-%s::%s: libfilter_check, bin_path: %s, libfilter_json: %s\n", service_name, instance_name, bin_path, libfilter_json);
+
+    struct liblist_array whitelist = {0};
+    struct liblist_array liblist = {0};
+    int rc = 0;
+    // default to service being allowed
+    bool result = true;
+
+    rc = libfilter_get_whitelist(&whitelist, libfilter_json, service_name, instance_name);
+    if (rc) {
+        LOG("libfilter-%s::%s: failed getting whitelist of libraries\n", service_name, instance_name);
+        goto cleanup;
+    }
+
+    rc = libfilter_get_libs(&liblist, bin_path, service_name, instance_name);
+    if (rc) {
+        LOG("libfilter-%s::%s: failed getting list of service's linked libraries\n", service_name, instance_name);
+        goto cleanup;
+    }
+
+    result = libfilter_whitelist_check_allowed(&whitelist, &liblist, service_name, instance_name);
+
+cleanup:
+    libfilter_free_list_data(&whitelist);
+    libfilter_free_list_data(&liblist);
+    return result;
+}
+
+static int libfilter_get_whitelist(struct liblist_array *result, const char *libfilter_json, const char *service_name, const char *instance_name)
+{
+    enum {
+        LIBFILTER_ATTR_WHITELIST,
+        __LIBFILTER_ATTR_MAX,
+    };
+    static const struct blobmsg_policy policy[__LIBFILTER_ATTR_MAX] = {
+        [LIBFILTER_ATTR_WHITELIST] = {"whitelist", BLOBMSG_TYPE_ARRAY},
+    };
+    struct blob_buf b = {0};
+    struct blob_attr *tb[__LIBFILTER_ATTR_MAX];
+    struct blob_attr *cur;
+    int rem;
+
+    blob_buf_init(&b, 0);
+    if (!blobmsg_add_json_from_file(&b, libfilter_json)) {
+        ERROR("libfilter-%s::%s: failed to load file %s\n", service_name, instance_name, libfilter_json);
+        return -1;
+    }
+
+    blobmsg_parse(policy, __LIBFILTER_ATTR_MAX, tb, blob_data(b.head), blob_len(b.head));
+    if (!tb[LIBFILTER_ATTR_WHITELIST]) {
+        ERROR("libfilter-%s::%s: %s is missing the whitelist table\n", service_name, instance_name, libfilter_json);
+        return -1;
+    }
+
+    int count = 0;
+    blobmsg_for_each_attr(cur, tb[LIBFILTER_ATTR_WHITELIST], rem)
+    {
+        count++;
+    }
+    result->count = count;
+    result->string_array = calloc(result->count, sizeof(char *));
+    if (!result->string_array) {
+        ERROR("libfilter-%s::%s: allocation error\n", service_name, instance_name);
+        return -1;
+    }
+
+    count = 0;
+    blobmsg_for_each_attr(cur, tb[LIBFILTER_ATTR_WHITELIST], rem)
+    {
+        char *name = blobmsg_get_string(cur);
+        if (!name) {
+            LOG("libfilter-%s::%s: invalid whitelist entry\n", service_name, instance_name);
+            continue;
+        }
+        result->string_array[count] = strdup(name);
+        count++;
+    }
+    return 0;
+}
+
+static int libfilter_get_libs(struct liblist_array *result, const char *bin_path, const char *service_name, const char *instance_name)
+{
+    int stdout_pipe[2];
+    int child;
+
+    if (pipe(stdout_pipe) < 0) {
+        ERROR("libfilter-%s::%s: error while creating pipe\n", service_name, instance_name);
+        return -1;
+    }
+
+    child = fork();
+    if (child < 0) {
+        ERROR("libfilter-%s::%s: failed to create child process\n", service_name, instance_name);
+        close(stdout_pipe[PIPE_READ]);
+        close(stdout_pipe[PIPE_WRITE]);
+        return -1;
+    } else if (child == 0) {
+        // child proccess
+        int rc = 0;
+        // close stderr, we don't need it
+        fclose(stderr);
+        // redirect stdout to our pipe
+        rc = dup2(stdout_pipe[PIPE_WRITE], STDOUT_FILENO);
+        if (rc == -1) {
+            close(stdout_pipe[PIPE_READ]);
+            close(stdout_pipe[PIPE_WRITE]);
+            exit(errno);
+        }
+
+        // these should be used by parent only
+        close(stdout_pipe[PIPE_READ]);
+        close(stdout_pipe[PIPE_WRITE]);
+
+        rc = execlp("ldd", "ldd", bin_path, (char *) NULL);
+
+        // if we got here, an error occurred but nothing we can do here
+        exit(rc);
+    } else {
+        // parent process
+
+        // write end of pipe isn't used by parent
+        close(stdout_pipe[PIPE_WRITE]);
+
+        char temp_string[MAX_LINE_SIZE] = {0};
+        char temp_char;
+
+        result->count = 0;
+        result->string_array = calloc(MAX_LINES, sizeof(char *));
+        int i = 0;
+        while (read(stdout_pipe[PIPE_READ], &temp_char, 1) == 1) {
+            temp_string[i] = temp_char;
+            i++;
+            if (i >= MAX_LINE_SIZE) {
+                ERROR("%libfilter-%s::%s: 'ldd' output line too long\n", service_name, instance_name);
+                close(stdout_pipe[PIPE_READ]);
+                return -1;
+            }
+
+            if (temp_char == '\n') {
+                result->string_array[result->count] = strdup(temp_string);
+                result->count++;
+                if (result->count >= MAX_LINES) {
+                    ERROR("%libfilter-%s::%s: too many lines in ldd output\n", service_name, instance_name);
+                    break;
+                }
+                i = 0;
+                memset(temp_string, 0, MAX_LINE_SIZE);
+            }
+        }
+        close(stdout_pipe[PIPE_READ]);
+        return 0;
+    }
+}
+static bool
+libfilter_whitelist_check_allowed(struct liblist_array *whitelist, struct liblist_array *liblist, const char *service_name, const char *instance_name)
+{
+    // if ldd output contains the entry from json config, it is considered a match
+    // example match:
+    // whitelist entry: "libc"
+    // ldd output entry: "libc.so => /lib/ld-musl-mipsel-sf.so.1 (0x55dc8000)"
+    // example not match:
+    // whitelist entry: "libc.so.2"
+    // ldd output entry: "libc.so => /lib/ld-musl-mipsel-sf.so.1 (0x55dc8000)"
+    bool result = true;
+    for (int i = 0; i < liblist->count; i++) {
+        bool match_found = false;
+        for (int j = 0; j < whitelist->count; j++) {
+            if (strstr(liblist->string_array[i], whitelist->string_array[j]) != NULL) {
+                match_found = true;
+                break;
+            }
+        }
+        // if match isn't found, this lib isn't allowed so this service isn't
+        // allowed
+        if (!match_found) {
+            LOG("libfilter-%s::%s: library not allowed: %s\n", service_name, instance_name, liblist->string_array[i]);
+            result = false;
+            break;
+        }
+    }
+    return result;
+}
+
+static void libfilter_free_list_data(struct liblist_array *liblist)
+{
+    for (int i = 0; i < liblist->count; i++) {
+        free(liblist->string_array[i]);
+    }
+    free(liblist->string_array);
+}
diff --git a/service/libfilter.h b/service/libfilter.h
new file mode 100644
index 0000000..8abc186
--- /dev/null
+++ b/service/libfilter.h
@@ -0,0 +1 @@
+bool libfilter_check_is_allowed(const char *bin_path, const char *libfilter_json, const char *service_name, const char *instance_name);
\ No newline at end of file
diff --git a/utils/utils.h b/utils/utils.h
index 908c314..5011104 100644
--- a/utils/utils.h
+++ b/utils/utils.h
@@ -18,6 +18,7 @@
 #include <libubox/avl.h>
 #include <libubox/blob.h>
 #include <libubox/blobmsg.h>
+#include <libubox/blobmsg_json.h>
 
 #define CMDLINE_SIZE 2048
 
